import type { DrivingTendencyData } from '@/store/websocket/types';

const egoLogs: Array<[string, number, number]> = [
  // timestamp, locationX, locationY
  ['2025-08-27T15:36:11', -81.78, 24.35],
  ['2025-08-27T15:36:12', -81.78, 24.35],
  ['2025-08-27T15:36:13', -81.78, 24.35],
  ['2025-08-27T15:36:14', -81.78, 24.35],
  ['2025-08-27T15:36:15', -81.78, 24.35],
  ['2025-08-27T15:36:16.572440+09:00', -81.78, 24.35],
  ['2025-08-27T15:36:17.577222+09:00', -81.78, 24.35],
  ['2025-08-27T15:36:18.581131+09:00', -81.78, 24.35],
  ['2025-08-27T15:36:19.584818+09:00', -81.27, 24.35],
  ['2025-08-27T15:36:20.589800+09:00', -79.22, 24.35],
  ['2025-08-27T15:36:21.591769+09:00', -76.06, 24.35],
  ['2025-08-27T15:36:22.596900+09:00', -70.48, 24.35],
  ['2025-08-27T15:36:23.600217+09:00', -65.62, 24.35],
  ['2025-08-27T15:36:24.604029+09:00', -60.55, 24.35],
  ['2025-08-27T15:36:25.607788+09:00', -56.05, 24.35],
  ['2025-08-27T15:36:26.611169+09:00', -52.59, 24.35],
  ['2025-08-27T15:36:27.617812+09:00', -48.58, 24.35],
  ['2025-08-27T15:36:28.623951+09:00', -42.63, 24.34],
  ['2025-08-27T15:36:29.626815+09:00', -34.55, 24.34],
  ['2025-08-27T15:36:30.631265+09:00', -25.41, 24.34],
  ['2025-08-27T15:36:31.635012+09:00', -15.39, 24.36],
  ['2025-08-27T15:36:32.640057+09:00', -7.22, 24.37],
  ['2025-08-27T15:36:33.643949+09:00', 1.44, 24.39],
  ['2025-08-27T15:36:34.707601+09:00', 9.46, 24.4],
  ['2025-08-27T15:36:35.714966+09:00', 16.97, 24.41],
  ['2025-08-27T15:36:36.718983+09:00', 26.22, 24.44],
  ['2025-08-27T15:36:37.723945+09:00', 35.14, 24.48],
  ['2025-08-27T15:36:38.728748+09:00', 41.94, 24.51],
  ['2025-08-27T15:36:39.734281+09:00', 44.31, 24.52],
  ['2025-08-27T15:36:40.738081+09:00', 45.63, 24.52],
  ['2025-08-27T15:36:41.741942+09:00', 46.65, 24.53],
  ['2025-08-27T15:36:42.744782+09:00', 47.46, 24.53],
  ['2025-08-27T15:36:43.748660+09:00', 47.83, 24.53],
  ['2025-08-27T15:36:44.750228+09:00', 48.7, 24.54],
  ['2025-08-27T15:36:45.754024+09:00', 52.62, 24.55],
  ['2025-08-27T15:36:46.757776+09:00', 57.9, 24.57],
  ['2025-08-27T15:36:47.761830+09:00', 62.73, 24.59],
  ['2025-08-27T15:36:48.766886+09:00', 67.03, 24.61],
  ['2025-08-27T15:36:49.770959+09:00', 70.68, 24.62],
  ['2025-08-27T15:36:50.774066+09:00', 73.73, 24.63],
  ['2025-08-27T15:36:51.776547+09:00', 76.21, 24.64],
  ['2025-08-27T15:36:52.781129+09:00', 79.9, 24.65],
  ['2025-08-27T15:36:53.783872+09:00', 82.46, 24.66],
  ['2025-08-27T15:36:54.787115+09:00', 82.48, 24.66],
  ['2025-08-27T15:36:55.789974+09:00', 82.48, 24.66],
  ['2025-08-27T15:36:56.794281+09:00', 82.48, 24.66],
  ['2025-08-27T15:36:57.796927+09:00', 82.48, 24.66],
  ['2025-08-27T15:36:58.802939+09:00', 82.48, 24.66],
  ['2025-08-27T15:36:59.806601+09:00', 82.48, 24.66],
  ['2025-08-27T15:37:00.810626+09:00', 82.48, 24.66],
  ['2025-08-27T15:37:01.813174+09:00', 82.48, 24.66],
  ['2025-08-27T15:37:02.816773+09:00', 82.58, 24.66],
  ['2025-08-27T15:37:03.820063+09:00', 85.1, 24.66],
  ['2025-08-27T15:37:04.826058+09:00', 91.1, 24.8],
  ['2025-08-27T15:37:05.830927+09:00', 97.57, 28.16],
  ['2025-08-27T15:37:06.844022+09:00', 101.14, 33.24],
  ['2025-08-27T15:37:07.855759+09:00', 102.16, 38.25],
  ['2025-08-27T15:37:08.861633+09:00', 101.93, 42.8],
  ['2025-08-27T15:37:09.865917+09:00', 101.91, 46.38],
  ['2025-08-27T15:37:10.869471+09:00', 101.88, 49.39],
  ['2025-08-27T15:37:11.873991+09:00', 101.86, 52.04],
  ['2025-08-27T15:37:12.879554+09:00', 101.84, 54.22],
  ['2025-08-27T15:37:13.883115+09:00', 101.81, 57.62],
  ['2025-08-27T15:37:14.886248+09:00', 101.74, 65.08],
  ['2025-08-27T15:37:15.889809+09:00', 101.68, 72.01],
  ['2025-08-27T15:37:16.893071+09:00', 101.67, 72.76],
  ['2025-08-27T15:37:17.895917+09:00', 101.67, 72.77],
  ['2025-08-27T15:37:18.899931+09:00', 101.67, 72.77],
  ['2025-08-27T15:37:19.909174+09:00', 101.67, 72.77],
];
const neighborLogs: Array<[string, number, number]> = [
  // timestamp, locationX, locationY
  ['2025-08-27T15:36:11', -83.13, 27.34],
  ['2025-08-27T15:36:12', -83.13, 27.34],
  ['2025-08-27T15:36:13', -83.13, 27.34],
  ['2025-08-27T15:36:14', -83.13, 27.34],
  ['2025-08-27T15:36:15', -83.13, 27.34],
  ['2025-08-27T15:36:16', -83.13, 27.34],
  ['2025-08-27T15:36:17', -82.79, 27.34],
  ['2025-08-27T15:36:18', -81.32, 27.36],
  ['2025-08-27T15:36:19', -79.07, 27.37],
  ['2025-08-27T15:36:20', -77.34, 27.38],
  ['2025-08-27T15:36:21.203216+09:00', -75.52, 27.4],
  ['2025-08-27T15:36:22.205823+09:00', -74.11, 27.41],
  ['2025-08-27T15:36:23.207639+09:00', -72.39, 27.42],
  ['2025-08-27T15:36:24.211739+09:00', -69.82, 27.44],
  ['2025-08-27T15:36:25.215982+09:00', -64.95, 27.47],
  ['2025-08-27T15:36:26.221035+09:00', -57.9, 27.52],
  ['2025-08-27T15:36:27.224311+09:00', -49.59, 27.58],
  ['2025-08-27T15:36:28.228095+09:00', -42.88, 27.63],
  ['2025-08-27T15:36:29.229970+09:00', -35.51, 27.68],
  ['2025-08-27T15:36:30.236884+09:00', -28.59, 27.73],
  ['2025-08-27T15:36:31.242947+09:00', -21.07, 27.8],
  ['2025-08-27T15:36:32.244489+09:00', -13.65, 27.87],
  ['2025-08-27T15:36:33.249595+09:00', -3.76, 27.97],
  ['2025-08-27T15:36:34.251811+09:00', 5.42, 28.06],
  ['2025-08-27T15:36:35.255822+09:00', 16.38, 28.16],
  ['2025-08-27T15:36:36.259444+09:00', 25.28, 28.24],
  ['2025-08-27T15:36:37.265048+09:00', 34.43, 28.31],
  ['2025-08-27T15:36:38.270028+09:00', 42.85, 28.38],
  ['2025-08-27T15:36:39.273072+09:00', 50.51, 28.44],
  ['2025-08-27T15:36:40.278144+09:00', 56.95, 28.5],
  ['2025-08-27T15:36:41.282960+09:00', 58.12, 28.51],
  ['2025-08-27T15:36:42.290651+09:00', 59.23, 28.52],
  ['2025-08-27T15:36:43.294178+09:00', 63.29, 28.56],
  ['2025-08-27T15:36:44.298525+09:00', 67.54, 28.6],
  ['2025-08-27T15:36:45.302672+09:00', 71.17, 28.63],
  ['2025-08-27T15:36:46.307706+09:00', 74.62, 28.66],
  ['2025-08-27T15:36:47.312856+09:00', 77.49, 28.69],
  ['2025-08-27T15:36:48.317180+09:00', 79.95, 28.71],
  ['2025-08-27T15:36:49.320849+09:00', 81.83, 28.73],
  ['2025-08-27T15:36:50.324046+09:00', 83.53, 28.74],
  ['2025-08-27T15:36:51.333035+09:00', 84.83, 28.75],
  ['2025-08-27T15:36:52.337803+09:00', 85.75, 28.76],
  ['2025-08-27T15:36:53.340597+09:00', 86.3, 28.77],
  ['2025-08-27T15:36:54.343924+09:00', 86.51, 28.77],
  ['2025-08-27T15:36:55.346819+09:00', 87.16, 28.8],
  ['2025-08-27T15:36:56.349770+09:00', 90.42, 29.4],
  ['2025-08-27T15:36:57.357805+09:00', 94.69, 31.96],
  ['2025-08-27T15:36:58.367334+09:00', 97.54, 36.0],
  ['2025-08-27T15:36:59.371502+09:00', 98.51, 40.22],
  ['2025-08-27T15:37:00.379892+09:00', 98.66, 43.9],
  ['2025-08-27T15:37:01.389229+09:00', 98.6, 46.99],
  ['2025-08-27T15:37:02.393331+09:00', 98.57, 48.22],
  ['2025-08-27T15:37:03.397503+09:00', 98.57, 48.36],
  ['2025-08-27T15:37:04.400467+09:00', 98.57, 48.36],
  ['2025-08-27T15:37:05.404428+09:00', 98.57, 48.36],
  ['2025-08-27T15:37:06.407851+09:00', 98.57, 48.36],
  ['2025-08-27T15:37:07.410541+09:00', 98.57, 48.36],
  ['2025-08-27T15:37:08.413586+09:00', 98.57, 48.36],
  ['2025-08-27T15:37:09.415803+09:00', 98.57, 48.36],
  ['2025-08-27T15:37:10.419640+09:00', 98.56, 48.55],
  ['2025-08-27T15:37:11.423332+09:00', 98.52, 51.18],
  ['2025-08-27T15:37:12.426066+09:00', 98.44, 55.98],
  ['2025-08-27T15:37:13.430637+09:00', 98.32, 63.21],
  ['2025-08-27T15:37:14.440214+09:00', 98.21, 69.09],
  ['2025-08-27T15:37:15.444185+09:00', 98.13, 73.98],
  ['2025-08-27T15:37:16.449140+09:00', 98.06, 78.09],
  ['2025-08-27T15:37:17.453558+09:00', 98.0, 81.74],
  ['2025-08-27T15:37:18.457198+09:00', 98.0, 82.16],
];

export const origin_longitude = 127.00374;
export const origin_latitude = 37.55807;

export const meters_per_lon_degree = 89000.0;
export const meters_per_lat_degree = 111139.0;

export function round(value: number, digits: number): number {
  const factor = Math.pow(10, digits);
  return Math.round(value * factor) / factor;
}

function calcLat(locationY: number): number {
  return round(origin_latitude + locationY / meters_per_lat_degree, 5);
}
function calcLon(locationX: number): number {
  return round(origin_longitude + locationX / meters_per_lon_degree, 5);
}

const pairLen = Math.min(egoLogs.length, neighborLogs.length);
export const DUMI: DrivingTendencyData[] = Array.from({ length: pairLen }, (_, i) => {
  const [timestamp, egoX, egoY] = egoLogs[i];
  const [, neighborX, neighborY] = neighborLogs[i];

  return {
    type: 'driving',
    payload: {
      timestamp: timestamp as string,
      ego: {
        userId: 1,
        pose: {
          latitude: calcLat(egoY as number),
          longitude: calcLon(egoX as number),
        },
      },
      neighbors: [
        {
          userId: 2,
          character: 'LION',
          pose: {
            latitude: calcLat(neighborY as number),
            longitude: calcLon(neighborX as number),
          },
        },
      ],
    },
  };
});
